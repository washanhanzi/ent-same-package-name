// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/washanhanzi/ent-same-package-name/ent/migrate"

	"github.com/washanhanzi/ent-same-package-name/ent/tablea"
	"github.com/washanhanzi/ent-same-package-name/ent/tableb"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// TableA is the client for interacting with the TableA builders.
	TableA *TableAClient
	// TableB is the client for interacting with the TableB builders.
	TableB *TableBClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.TableA = NewTableAClient(c.config)
	c.TableB = NewTableBClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:    ctx,
		config: cfg,
		TableA: NewTableAClient(cfg),
		TableB: NewTableBClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config: cfg,
		TableA: NewTableAClient(cfg),
		TableB: NewTableBClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		TableA.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.TableA.Use(hooks...)
	c.TableB.Use(hooks...)
}

// TableAClient is a client for the TableA schema.
type TableAClient struct {
	config
}

// NewTableAClient returns a client for the TableA from the given config.
func NewTableAClient(c config) *TableAClient {
	return &TableAClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tablea.Hooks(f(g(h())))`.
func (c *TableAClient) Use(hooks ...Hook) {
	c.hooks.TableA = append(c.hooks.TableA, hooks...)
}

// Create returns a create builder for TableA.
func (c *TableAClient) Create() *TableACreate {
	mutation := newTableAMutation(c.config, OpCreate)
	return &TableACreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TableA entities.
func (c *TableAClient) CreateBulk(builders ...*TableACreate) *TableACreateBulk {
	return &TableACreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TableA.
func (c *TableAClient) Update() *TableAUpdate {
	mutation := newTableAMutation(c.config, OpUpdate)
	return &TableAUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TableAClient) UpdateOne(t *TableA) *TableAUpdateOne {
	mutation := newTableAMutation(c.config, OpUpdateOne, withTableA(t))
	return &TableAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TableAClient) UpdateOneID(id int) *TableAUpdateOne {
	mutation := newTableAMutation(c.config, OpUpdateOne, withTableAID(id))
	return &TableAUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TableA.
func (c *TableAClient) Delete() *TableADelete {
	mutation := newTableAMutation(c.config, OpDelete)
	return &TableADelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TableAClient) DeleteOne(t *TableA) *TableADeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TableAClient) DeleteOneID(id int) *TableADeleteOne {
	builder := c.Delete().Where(tablea.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TableADeleteOne{builder}
}

// Query returns a query builder for TableA.
func (c *TableAClient) Query() *TableAQuery {
	return &TableAQuery{
		config: c.config,
	}
}

// Get returns a TableA entity by its id.
func (c *TableAClient) Get(ctx context.Context, id int) (*TableA, error) {
	return c.Query().Where(tablea.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TableAClient) GetX(ctx context.Context, id int) *TableA {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TableAClient) Hooks() []Hook {
	return c.hooks.TableA
}

// TableBClient is a client for the TableB schema.
type TableBClient struct {
	config
}

// NewTableBClient returns a client for the TableB from the given config.
func NewTableBClient(c config) *TableBClient {
	return &TableBClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tableb.Hooks(f(g(h())))`.
func (c *TableBClient) Use(hooks ...Hook) {
	c.hooks.TableB = append(c.hooks.TableB, hooks...)
}

// Create returns a create builder for TableB.
func (c *TableBClient) Create() *TableBCreate {
	mutation := newTableBMutation(c.config, OpCreate)
	return &TableBCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TableB entities.
func (c *TableBClient) CreateBulk(builders ...*TableBCreate) *TableBCreateBulk {
	return &TableBCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TableB.
func (c *TableBClient) Update() *TableBUpdate {
	mutation := newTableBMutation(c.config, OpUpdate)
	return &TableBUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TableBClient) UpdateOne(t *TableB) *TableBUpdateOne {
	mutation := newTableBMutation(c.config, OpUpdateOne, withTableB(t))
	return &TableBUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TableBClient) UpdateOneID(id int) *TableBUpdateOne {
	mutation := newTableBMutation(c.config, OpUpdateOne, withTableBID(id))
	return &TableBUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TableB.
func (c *TableBClient) Delete() *TableBDelete {
	mutation := newTableBMutation(c.config, OpDelete)
	return &TableBDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TableBClient) DeleteOne(t *TableB) *TableBDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TableBClient) DeleteOneID(id int) *TableBDeleteOne {
	builder := c.Delete().Where(tableb.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TableBDeleteOne{builder}
}

// Query returns a query builder for TableB.
func (c *TableBClient) Query() *TableBQuery {
	return &TableBQuery{
		config: c.config,
	}
}

// Get returns a TableB entity by its id.
func (c *TableBClient) Get(ctx context.Context, id int) (*TableB, error) {
	return c.Query().Where(tableb.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TableBClient) GetX(ctx context.Context, id int) *TableB {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TableBClient) Hooks() []Hook {
	return c.hooks.TableB
}
