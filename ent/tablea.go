// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/washanhanzi/ent-same-package-name/a/entity"
	"github.com/washanhanzi/ent-same-package-name/ent/tablea"
)

// TableA is the model entity for the TableA schema.
type TableA struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// A holds the value of the "a" field.
	A entity.A `json:"a,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TableA) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tablea.FieldA:
			values[i] = new([]byte)
		case tablea.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TableA", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TableA fields.
func (t *TableA) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tablea.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tablea.FieldA:

			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field a", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.A); err != nil {
					return fmt.Errorf("unmarshal field a: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TableA.
// Note that you need to call TableA.Unwrap() before calling this method if this TableA
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *TableA) Update() *TableAUpdateOne {
	return (&TableAClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the TableA entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *TableA) Unwrap() *TableA {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: TableA is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *TableA) String() string {
	var builder strings.Builder
	builder.WriteString("TableA(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", a=")
	builder.WriteString(fmt.Sprintf("%v", t.A))
	builder.WriteByte(')')
	return builder.String()
}

// TableAs is a parsable slice of TableA.
type TableAs []*TableA

func (t TableAs) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
